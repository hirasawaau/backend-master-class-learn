// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createEntryStmt, err = db.PrepareContext(ctx, createEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntry: %w", err)
	}
	if q.createTransferStmt, err = db.PrepareContext(ctx, createTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfer: %w", err)
	}
	if q.deleteAccountStmt, err = db.PrepareContext(ctx, deleteAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAccount: %w", err)
	}
	if q.deleteEntryStmt, err = db.PrepareContext(ctx, deleteEntry); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEntry: %w", err)
	}
	if q.deleteTransferStmt, err = db.PrepareContext(ctx, deleteTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransfer: %w", err)
	}
	if q.findAccountStmt, err = db.PrepareContext(ctx, findAccount); err != nil {
		return nil, fmt.Errorf("error preparing query FindAccount: %w", err)
	}
	if q.findAccountsStmt, err = db.PrepareContext(ctx, findAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query FindAccounts: %w", err)
	}
	if q.findEntriesStmt, err = db.PrepareContext(ctx, findEntries); err != nil {
		return nil, fmt.Errorf("error preparing query FindEntries: %w", err)
	}
	if q.findEntryStmt, err = db.PrepareContext(ctx, findEntry); err != nil {
		return nil, fmt.Errorf("error preparing query FindEntry: %w", err)
	}
	if q.findTransferStmt, err = db.PrepareContext(ctx, findTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query FindTransfer: %w", err)
	}
	if q.findTransfersStmt, err = db.PrepareContext(ctx, findTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query FindTransfers: %w", err)
	}
	if q.updateAccountBalanceStmt, err = db.PrepareContext(ctx, updateAccountBalance); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAccountBalance: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createEntryStmt != nil {
		if cerr := q.createEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryStmt: %w", cerr)
		}
	}
	if q.createTransferStmt != nil {
		if cerr := q.createTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransferStmt: %w", cerr)
		}
	}
	if q.deleteAccountStmt != nil {
		if cerr := q.deleteAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAccountStmt: %w", cerr)
		}
	}
	if q.deleteEntryStmt != nil {
		if cerr := q.deleteEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEntryStmt: %w", cerr)
		}
	}
	if q.deleteTransferStmt != nil {
		if cerr := q.deleteTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransferStmt: %w", cerr)
		}
	}
	if q.findAccountStmt != nil {
		if cerr := q.findAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAccountStmt: %w", cerr)
		}
	}
	if q.findAccountsStmt != nil {
		if cerr := q.findAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAccountsStmt: %w", cerr)
		}
	}
	if q.findEntriesStmt != nil {
		if cerr := q.findEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findEntriesStmt: %w", cerr)
		}
	}
	if q.findEntryStmt != nil {
		if cerr := q.findEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findEntryStmt: %w", cerr)
		}
	}
	if q.findTransferStmt != nil {
		if cerr := q.findTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTransferStmt: %w", cerr)
		}
	}
	if q.findTransfersStmt != nil {
		if cerr := q.findTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTransfersStmt: %w", cerr)
		}
	}
	if q.updateAccountBalanceStmt != nil {
		if cerr := q.updateAccountBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAccountBalanceStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createAccountStmt        *sql.Stmt
	createEntryStmt          *sql.Stmt
	createTransferStmt       *sql.Stmt
	deleteAccountStmt        *sql.Stmt
	deleteEntryStmt          *sql.Stmt
	deleteTransferStmt       *sql.Stmt
	findAccountStmt          *sql.Stmt
	findAccountsStmt         *sql.Stmt
	findEntriesStmt          *sql.Stmt
	findEntryStmt            *sql.Stmt
	findTransferStmt         *sql.Stmt
	findTransfersStmt        *sql.Stmt
	updateAccountBalanceStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createAccountStmt:        q.createAccountStmt,
		createEntryStmt:          q.createEntryStmt,
		createTransferStmt:       q.createTransferStmt,
		deleteAccountStmt:        q.deleteAccountStmt,
		deleteEntryStmt:          q.deleteEntryStmt,
		deleteTransferStmt:       q.deleteTransferStmt,
		findAccountStmt:          q.findAccountStmt,
		findAccountsStmt:         q.findAccountsStmt,
		findEntriesStmt:          q.findEntriesStmt,
		findEntryStmt:            q.findEntryStmt,
		findTransferStmt:         q.findTransferStmt,
		findTransfersStmt:        q.findTransfersStmt,
		updateAccountBalanceStmt: q.updateAccountBalanceStmt,
	}
}
